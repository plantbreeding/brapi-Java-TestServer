/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;
import org.brapi.test.BrAPITestServer.exceptions.BrAPIServerException;

import io.swagger.model.GermplasmAttributeListResponse;
import io.swagger.model.GermplasmMCPDResponse;
import io.swagger.model.GermplasmMarkerprofilesListResponse;
import io.swagger.model.GermplasmResponse;
import io.swagger.model.GermplasmResponse1;
import io.swagger.model.PedigreeResponse;
import io.swagger.model.ProgenyResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import jakarta.validation.Valid;
import java.util.ArrayList;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-12-05T14:32:54.779-05:00[America/New_York]")

@Api(value = "germplasm", description = "the germplasm API")
public interface GermplasmApi {

    @ApiOperation(value = "Get the Germplasm Attributes associated with a specific Germplasm", nickname = "germplasmGermplasmDbIdAttributesGet", notes = "Values for all attributes by default.", response = GermplasmAttributeListResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Germplasm Attributes","Germplasm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GermplasmAttributeListResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/germplasm/{germplasmDbId}/attributes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GermplasmAttributeListResponse> germplasmGermplasmDbIdAttributesGet(@ApiParam(value = "The germplasm characterized",required=true) @PathVariable("germplasmDbId") String germplasmDbId,@ApiParam(value = "Restrict the response to only the listed attributeDbIds.") @Valid @RequestParam(value = "attributeDbIds", required = false) ArrayList<String> attributeDbIds,@ApiParam(value = "**Deprecated** Use \"attributeDbIds\" instead") @Valid @RequestParam(value = "attributeList", required = false) ArrayList<String> attributeList,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the details of a specific Germplasm", nickname = "germplasmGermplasmDbIdGet", notes = "Germplasm Details by germplasmDbId was merged with Germplasm Multi Crop Passport Data. The MCPD fields are optional and marked with the prefix [MCPD].", response = GermplasmResponse1.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Germplasm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GermplasmResponse1.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/germplasm/{germplasmDbId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GermplasmResponse1> germplasmGermplasmDbIdGet(@ApiParam(value = "The internal id of the germplasm",required=true) @PathVariable("germplasmDbId") String germplasmDbId,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the Marker Profiles associated with a specific Germplasm", nickname = "germplasmGermplasmDbIdMarkerprofilesGet", notes = "Retrieve the markerProfileDbIds for a given Germplasm ID", response = GermplasmMarkerprofilesListResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Germplasm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GermplasmMarkerprofilesListResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/germplasm/{germplasmDbId}/markerprofiles",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GermplasmMarkerprofilesListResponse> germplasmGermplasmDbIdMarkerprofilesGet(@ApiParam(value = "the internal id of the germplasm",required=true) @PathVariable("germplasmDbId") String germplasmDbId,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the details of a specifc Germplasm in MCPD format", nickname = "germplasmGermplasmDbIdMcpdGet", notes = "Get all MCPD details of a germplasm  <a target=\"_blank\" href=\"https://www.bioversityinternational.org/fileadmin/user_upload/online_library/publications/pdfs/FAOBIOVERSITY_MULTI-CROP_PASSPORT_DESCRIPTORS_V.2.1_2015_2020.pdf\"> MCPD v2.1 spec can be found here </a>  Implementation Notes  - When the MCPD spec identifies a field which can have multiple values returned, the JSON response should be an array instead of a semi-colon seperated string.", response = GermplasmMCPDResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Germplasm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GermplasmMCPDResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/germplasm/{germplasmDbId}/mcpd",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GermplasmMCPDResponse> germplasmGermplasmDbIdMcpdGet(@ApiParam(value = "the internal id of the germplasm",required=true) @PathVariable("germplasmDbId") String germplasmDbId,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the pedigree details of a specific Germplasm", nickname = "germplasmGermplasmDbIdPedigreeGet", notes = "Get the parentage information of a specific Germplasm", response = PedigreeResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Germplasm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = PedigreeResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/germplasm/{germplasmDbId}/pedigree",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<PedigreeResponse> germplasmGermplasmDbIdPedigreeGet(@ApiParam(value = "the internal id of the germplasm",required=true) @PathVariable("germplasmDbId") String germplasmDbId,@ApiParam(value = "text representation of the pedigree") @Valid @RequestParam(value = "notation", required = false) String notation,@ApiParam(value = "include array of siblings in response") @Valid @RequestParam(value = "includeSiblings", required = false) Boolean includeSiblings,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the progeny details of a specific Germplasm", nickname = "germplasmGermplasmDbIdProgenyGet", notes = "Get the germplasmDbIds for all the Progeny of a particular germplasm.  Implementation Notes  - Regarding the 'parentType' field in the progeny object. Given a germplasm A having a progeny B and C, 'parentType' for progeny B refers to the 'parentType' of A toward B.", response = ProgenyResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Germplasm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProgenyResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/germplasm/{germplasmDbId}/progeny",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProgenyResponse> germplasmGermplasmDbIdProgenyGet(@ApiParam(value = "the internal id of the germplasm",required=true) @PathVariable("germplasmDbId") String germplasmDbId,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the Germplasm", nickname = "germplasmGet", notes = "Addresses these needs  - General germplasm search mechanism that accepts POST for complex queries   - Possibility to search germplasm by more parameters than those allowed by the existing germplasm search   - Possibility to get MCPD details by PUID rather than dbId", response = GermplasmResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Germplasm", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GermplasmResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
    @RequestMapping(value = "/germplasm",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GermplasmResponse> germplasmGet(@ApiParam(value = "Permanent unique identifier (DOI, URI, etc.)") @Valid @RequestParam(value = "germplasmPUI", required = false) String germplasmPUI,@ApiParam(value = "Internal database identifier") @Valid @RequestParam(value = "germplasmDbId", required = false) String germplasmDbId,@ApiParam(value = "Name of the germplasm") @Valid @RequestParam(value = "germplasmName", required = false) String germplasmName,@ApiParam(value = "The common crop name related to this germplasm") @Valid @RequestParam(value = "commonCropName", required = false) String commonCropName,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;

}
