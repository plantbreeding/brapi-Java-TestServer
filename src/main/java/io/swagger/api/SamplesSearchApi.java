/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;
import org.brapi.test.BrAPITestServer.exceptions.BrAPIServerException;

import io.swagger.model.SampleSearchRequestDep;
import io.swagger.model.SamplesResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import jakarta.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-12-05T14:32:54.779-05:00[America/New_York]")

@Api(value = "samples-search", description = "the samples-search API")
public interface SamplesSearchApi {

    @ApiOperation(value = "Get the Sample Search", nickname = "samplesSearchGet", notes = "DEPRECATED in v1.3 - see GET /samples", response = SamplesResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Samples","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SamplesResponse.class) })
    @RequestMapping(value = "/samples-search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SamplesResponse> samplesSearchGet(@ApiParam(value = "the internal DB id for a sample") @Valid @RequestParam(value = "sampleDbId", required = false) String sampleDbId,@ApiParam(value = "the internal DB id for an observation unit where a sample was taken from") @Valid @RequestParam(value = "observationUnitDbId", required = false) String observationUnitDbId,@ApiParam(value = "the internal DB id for a plate of samples") @Valid @RequestParam(value = "plateDbId", required = false) String plateDbId,@ApiParam(value = "the internal DB id for a germplasm") @Valid @RequestParam(value = "germplasmDbId", required = false) String germplasmDbId,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) throws BrAPIServerException;


    @ApiOperation(value = "Post Sample Search", nickname = "samplesSearchPost", notes = "DEPRECATED in v1.3 - see GET /search/samples", response = SamplesResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Samples","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SamplesResponse.class) })
    @RequestMapping(value = "/samples-search",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SamplesResponse> samplesSearchPost(@ApiParam(value = ""  )  @Valid @RequestBody SampleSearchRequestDep body) throws BrAPIServerException;

}
