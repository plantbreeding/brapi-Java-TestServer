/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;
import org.brapi.test.BrAPITestServer.exceptions.BrAPIServerException;

import io.swagger.model.MarkerProfileDescriptionsResponse;
import io.swagger.model.MarkerProfilesResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import jakarta.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-12-05T14:32:54.779-05:00[America/New_York]")

@Api(value = "markerprofiles", description = "the markerprofiles API")
public interface MarkerprofilesApi {

    @ApiOperation(value = "Get the Marker Profiles", nickname = "markerprofilesGet", notes = "For the requested Germplasm Id and/or Extract Id, returns the Markerprofile Id and number of non-missing allele calls (marker/allele pairs).", response = MarkerProfileDescriptionsResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Marker Profiles", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MarkerProfileDescriptionsResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
    @RequestMapping(value = "/markerprofiles",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MarkerProfileDescriptionsResponse> markerprofilesGet(@ApiParam(value = "The server's internal ids for the Germplasm IDs, as returned by the Find marker profile by Germplasm service.") @Valid @RequestParam(value = "germplasmDbId", required = false) String germplasmDbId,@ApiParam(value = "The server's internal id for the StudyDbId") @Valid @RequestParam(value = "studyDbId", required = false) String studyDbId,@ApiParam(value = "The server's internal id for the SampleDbId") @Valid @RequestParam(value = "sampleDbId", required = false) String sampleDbId,@ApiParam(value = "The server's internal id for the ExtractDbId") @Valid @RequestParam(value = "extractDbId", required = false) String extractDbId,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the details for a specific Marker Profile", nickname = "markerprofilesMarkerProfileDbIdGet", notes = "For the requested marker profile ID, returns the allele call for each marker.           Allele encodings  - Unknown data will by default be encoded by \\\"N\\\"  - Homozygotes are returned as a single occurance, e.g. AA -> A, GG -> G  - Phased heterozygotes are by default separated by a pipe (\\\"|\\\") and unphased heterozygotes are by default separated by a forward slash (\\\"/\\\")  - Dominant markers such as DArTs: 1 for present, 0 for absent          - If the user would like to use an empty string (\\\"\\\") for any of the parameters, the value should be set to the reserved word \\\"empty_string\\\", e.g. sepUnphased=empty_string.  Open issue: The pages of data will need to be sorted sensibly in order for the requested page to be delivered consistently.  By map or genome position? Alphabetically?'\"", response = MarkerProfilesResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Marker Profiles", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MarkerProfilesResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/markerprofiles/{markerProfileDbId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MarkerProfilesResponse> markerprofilesMarkerProfileDbIdGet(@ApiParam(value = "The server's internal id for the marker profile",required=true) @PathVariable("markerProfileDbId") String markerProfileDbId,@ApiParam(value = "Should homozygotes NOT be collapsed into a single orrucance?") @Valid @RequestParam(value = "expandHomozygotes", required = false) Boolean expandHomozygotes,@ApiParam(value = "The string to use as a representation for missing data or the reserved word \"empty_string\".") @Valid @RequestParam(value = "unknownString", required = false) String unknownString,@ApiParam(value = "The string to use as a separator for phased allele calls or the reserved word \"empty_string\".") @Valid @RequestParam(value = "sepPhased", required = false) String sepPhased,@ApiParam(value = "The string to use as a separator for unphased allele calls or the reserved word \"empty_string\".") @Valid @RequestParam(value = "sepUnphased", required = false) String sepUnphased,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;

}
