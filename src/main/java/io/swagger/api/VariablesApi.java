/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;
import org.brapi.test.BrAPITestServer.exceptions.BrAPIServerException;

import io.swagger.model.DataTypesResponse;
import io.swagger.model.ObservationVariableResponse;
import io.swagger.model.ObservationVariablesResponse;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import jakarta.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-12-05T14:32:54.779-05:00[America/New_York]")

@Api(value = "variables", description = "the variables API")
public interface VariablesApi {

    @ApiOperation(value = "Variable data type list", nickname = "variablesDatatypesGet", notes = "DEPRECATED in v1.3 - See documentation on BrAPI fixed set of data types, references from the Crop Ontology", response = DataTypesResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Observation Variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = DataTypesResponse.class) })
    @RequestMapping(value = "/variables/datatypes",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<DataTypesResponse> variablesDatatypesGet(@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) throws BrAPIServerException;


    @ApiOperation(value = "Get the Observation Variables", nickname = "variablesGet", notes = "Call to retrieve a list of observationVariables available in the system.", response = ObservationVariablesResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Observation Variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ObservationVariablesResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
    @RequestMapping(value = "/variables",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ObservationVariablesResponse> variablesGet(@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization,@ApiParam(value = "Variable's unique ID") @Valid @RequestParam(value = "observationVariableDbId", required = false) String observationVariableDbId,@ApiParam(value = "Variable's trait class (phenological, physiological, morphological, etc.)") @Valid @RequestParam(value = "traitClass", required = false) String traitClass) throws BrAPIServerException;


    @ApiOperation(value = "Get the details for a specific Observation Variable", nickname = "variablesObservationVariableDbIdGet", notes = "Retrieve variable details", response = ObservationVariableResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Observation Variables", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ObservationVariableResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/variables/{observationVariableDbId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ObservationVariableResponse> variablesObservationVariableDbIdGet(@ApiParam(value = "string id of the variable",required=true) @PathVariable("observationVariableDbId") String observationVariableDbId,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;

}
