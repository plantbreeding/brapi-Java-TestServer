/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.0).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;
import org.brapi.test.BrAPITestServer.exceptions.BrAPIServerException;

import io.swagger.model.GermplasmResponse;
import io.swagger.model.GermplasmSearchRequest;
import io.swagger.model.ImagesResponse;
import io.swagger.model.ImagesSearchRequest;
import io.swagger.model.MarkersResponse;
import io.swagger.model.MarkersSearchRequest;
import io.swagger.model.ObservationUnitsResponse1;
import io.swagger.model.ObservationUnitsTableResponse1;
import io.swagger.model.ObservationVariableSearchRequest;
import io.swagger.model.ObservationVariablesResponse;
import io.swagger.model.PhenotypesSearchRequest;
import io.swagger.model.ProgramsResponse;
import io.swagger.model.ProgramsSearchRequest;
import io.swagger.model.SampleSearchRequest;
import io.swagger.model.SamplesResponse;
import io.swagger.model.StudiesResponse;
import io.swagger.model.StudySearchRequest;
import io.swagger.model.SuccessfulSearchResponse;
import io.swagger.model.WSMIMEDataTypes;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import jakarta.validation.Valid;
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2018-12-05T14:32:54.779-05:00[America/New_York]")

@Api(value = "search", description = "the search API")
public interface SearchApi {

    @ApiOperation(value = "Submit a search request for Germplasm", nickname = "searchGermplasmPost", notes = "Search for a set of germplasm based on some criteria  Addresses these needs   - General germplasm search mechanism that accepts POST for complex queries   - Possibility to search germplasm by more parameters than those allowed by the existing germplasm search   - Possibility to get MCPD details by PUID rather than dbId  See Search Services for additional implementation details.", response = SuccessfulSearchResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Germplasm","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SuccessfulSearchResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
    @RequestMapping(value = "/search/germplasm",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SuccessfulSearchResponse> searchGermplasmPost(@ApiParam(value = ""  )  @Valid @RequestBody GermplasmSearchRequest body,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the results of a Germplasm search request", nickname = "searchGermplasmSearchResultsDbIdGet", notes = "See Search Services for additional implementation details. Addresses these needs: 1. General germplasm search mechanism that accepts POST for complex queries 2. possibility to search germplasm by more parameters than those allowed by the existing germplasm search 3. possibility to get MCPD details by PUID rather than dbId", response = GermplasmResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Germplasm","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = GermplasmResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/search/germplasm/{searchResultsDbId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GermplasmResponse> searchGermplasmSearchResultsDbIdGet(@ApiParam(value = "Permanent unique identifier which references the search results",required=true) @PathVariable("searchResultsDbId") String searchResultsDbId,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Submit a search request for Images", nickname = "searchImagesPost", notes = "Get filtered set of image meta data  Implementation Notes  - 'imageURL' should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's.    See Search Services for additional implementation details.", response = SuccessfulSearchResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Images","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SuccessfulSearchResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
    @RequestMapping(value = "/search/images",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SuccessfulSearchResponse> searchImagesPost(@ApiParam(value = ""  )  @Valid @RequestBody ImagesSearchRequest body,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the results of an Images search request", nickname = "searchImagesSearchResultsDbIdGet", notes = "Get filtered set of image meta data  Implementation Notes  - 'imageURL' should be a complete URL decribing the location of the image. There is no BrAPI call for retireiving the image content, so it could be on a different path, or a different host.  - 'descriptiveOntologyTerm' can be thought of as Tags for the image. These could be simple descriptive words, or ontology references, or full ontology URI's.  ", response = ImagesResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Images","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ImagesResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/search/images/{searchResultsDbId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ImagesResponse> searchImagesSearchResultsDbIdGet(@ApiParam(value = "Permanent unique identifier which references the search results",required=true) @PathVariable("searchResultsDbId") String searchResultsDbId,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Submit a search request for Markers", nickname = "searchMarkersPost", notes = "See Search Services for additional implementation details. Other service requests use the servers internal `markerDbId`. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria.  If there is none, an empty array is returned. If there is one or more than one match, returns an array of all marker records that match the search criteria. '", response = SuccessfulSearchResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Markers","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SuccessfulSearchResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
    @RequestMapping(value = "/search/markers",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SuccessfulSearchResponse> searchMarkersPost(@ApiParam(value = "The database IDs of the markers to search for"  )  @Valid @RequestBody MarkersSearchRequest body,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the results of a Markers search request", nickname = "searchMarkersSearchResultsDbIdGet", notes = "See Search Services for additional implementation details. Other service requests use the servers internal `markerDbId`. This service returns marker records that provide the markerDbId. For the requested name or synonym, returns an array (possibly empty) of marker records that match the search criteria. - If there is none, an empty array is returned. - If there is one or more than one match, returns an array of all marker records that match the search criteria. '", response = MarkersResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Markers","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = MarkersResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/search/markers/{searchResultsDbId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<MarkersResponse> searchMarkersSearchResultsDbIdGet(@ApiParam(value = "Permanent unique identifier which references the search results",required=true) @PathVariable("searchResultsDbId") String searchResultsDbId,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Submit a search request for a table of Observations", nickname = "searchObservationtablesPost", notes = "Returns a list of observationUnit with the observed Phenotypes.  observationTimeStamp - Iso Standard 8601.  observationValue data type inferred from the ontology", response = SuccessfulSearchResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Observations","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SuccessfulSearchResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
    @RequestMapping(value = "/search/observationtables",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SuccessfulSearchResponse> searchObservationtablesPost(@ApiParam(value = ""  )  @Valid @RequestBody PhenotypesSearchRequest body,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the results of a Observation table search request", nickname = "searchObservationtablesSearchResultsDbIdGet", notes = "Returns a list of observationUnit with the observed Phenotypes.  observationTimeStamp - Iso Standard 8601.  observationValue data type inferred from the ontology ", response = ObservationUnitsTableResponse1.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Observations","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ObservationUnitsTableResponse1.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/search/observationtables/{searchResultsDbId}",
        produces = { "application/json", "text/csv", "text/tsv" }, 
        method = RequestMethod.GET)
    ResponseEntity<Object> searchObservationtablesSearchResultsDbIdGet(@ApiParam(value = "The requested content type which should be returned by the server" ,required=true) @RequestHeader(value="Accept", required=true) WSMIMEDataTypes accept,@ApiParam(value = "Permanent unique identifier which references the search results",required=true) @PathVariable("searchResultsDbId") String searchResultsDbId,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize) throws BrAPIServerException;


    @ApiOperation(value = "Submit a search request for Observation Units", nickname = "searchObservationunitsPost", notes = "Returns a list of observationUnit with the observed Phenotypes.  See Search Services for additional implementation details.  Use case - this section allows to get a dataset from multiple studies. It allows to integrate data from several databases.  Refactor note - This call allows to get and integrate portions of multiple phenotyping data matrixes. A proposed evolution allowed to get a list of single observations, this functionality is still possible with this call by specifybing the observation variable, see below.  Example Use cases   - Study a panel of germplasm accross multiple studies      '{\"germplasmDbIds\": [\"Syrah\", \"34Mtp362\"]}'  - Get all data for a specific study (same as \"/studies/{studyDbId}/observationunits\")      '{\"studyDbIds\" : [\"383\"]}'  - Get simple atomic phenotyping values       '{         \"germplasmDbIds\" : [ \"Syrah\", \"34Mtp362\" ],          \"observationVariableDbIds\" : [ \"CO_345:0000043\"]       }'  - Study Locations for adaptation to climate change      '{         \"locationDbIds\" : [\"383838\", \"MONTPELLIER\"],          \"germplasmDbIds\" : [ \"14Mtp361\", \"24Mtp362\", \"34Mtp363\", \"44Mtp364\"]       }'  - Find phenotypes that are from after a certain timestamp      '{         \"observationTimeStampRangeStart\" : \"2013-06-14T23:59:59-04:00\",          \"observationTimeStampRangeEnd\" : \"2013-06-15T23:59:59-04:00\"       }'       observationTimeStampRangeStart and observationTimeStampRangeEnd use Iso Standard 8601.  observationValue data type inferred from the ontology", response = SuccessfulSearchResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Observations","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SuccessfulSearchResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
    @RequestMapping(value = "/search/observationunits",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SuccessfulSearchResponse> searchObservationunitsPost(@ApiParam(value = ""  )  @Valid @RequestBody PhenotypesSearchRequest body,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Observation Unit Search", nickname = "searchObservationunitsSearchResultsDbIdGet", notes = "Returns a list of observationUnit with the observed Phenotypes.  See Search Services for additional implementation details.", response = ObservationUnitsResponse1.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Observations","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ObservationUnitsResponse1.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/search/observationunits/{searchResultsDbId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ObservationUnitsResponse1> searchObservationunitsSearchResultsDbIdGet(@ApiParam(value = "Permanent unique identifier which references the search results",required=true) @PathVariable("searchResultsDbId") String searchResultsDbId,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Submit a search request for Programs", nickname = "searchProgramsPost", notes = "Advanced searching for the programs resource. See Search Services for additional implementation details.", response = SuccessfulSearchResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Programs","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SuccessfulSearchResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
    @RequestMapping(value = "/search/programs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SuccessfulSearchResponse> searchProgramsPost(@ApiParam(value = ""  )  @Valid @RequestBody ProgramsSearchRequest body,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the results of a Programs search request", nickname = "searchProgramsSearchResultsDbIdGet", notes = "Advanced searching for the programs resource. See Search Services for additional implementation details.", response = ProgramsResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Programs","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ProgramsResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/search/programs/{searchResultsDbId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ProgramsResponse> searchProgramsSearchResultsDbIdGet(@ApiParam(value = "Permanent unique identifier which references the search results",required=true) @PathVariable("searchResultsDbId") String searchResultsDbId,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Submit a search request for Samples", nickname = "searchSamplesPost", notes = "Used to retrieve list of Samples from a Sample Tracking system based on some search criteria. See Search Services for additional implementation details.", response = SuccessfulSearchResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Samples","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SuccessfulSearchResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
    @RequestMapping(value = "/search/samples",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SuccessfulSearchResponse> searchSamplesPost(@ApiParam(value = ""  )  @Valid @RequestBody SampleSearchRequest body,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the results of a Samples search request", nickname = "searchSamplesSearchResultsDbIdGet", notes = "Used to retrieve list of Samples from a Sample Tracking system based on some search criteria. See Search Services for additional implementation details.", response = SamplesResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Samples","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SamplesResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/search/samples/{searchResultsDbId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SamplesResponse> searchSamplesSearchResultsDbIdGet(@ApiParam(value = "Permanent unique identifier which references the search results",required=true) @PathVariable("searchResultsDbId") String searchResultsDbId,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Submit a search request for Studies", nickname = "searchStudiesPost", notes = "Get list of studies StartDate and endDate should be ISO8601 format for dates See Search Services for additional implementation details.", response = SuccessfulSearchResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Studies","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SuccessfulSearchResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
    @RequestMapping(value = "/search/studies",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SuccessfulSearchResponse> searchStudiesPost(@ApiParam(value = "Study Search request"  )  @Valid @RequestBody StudySearchRequest body,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the results of a Studies search request", nickname = "searchStudiesSearchResultsDbIdGet", notes = "Get list of studies  StartDate and endDate should be ISO8601 format for dates  See Search Services for additional implementation details.", response = StudiesResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Studies","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = StudiesResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/search/studies/{searchResultsDbId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<StudiesResponse> searchStudiesSearchResultsDbIdGet(@ApiParam(value = "Permanent unique identifier which references the search results",required=true) @PathVariable("searchResultsDbId") String searchResultsDbId,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Submit a search request for Observation Variables", nickname = "searchVariablesPost", notes = "Search observation variables.  See Search Services for additional implementation details.", response = SuccessfulSearchResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Observation Variables","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = SuccessfulSearchResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class) })
    @RequestMapping(value = "/search/variables",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<SuccessfulSearchResponse> searchVariablesPost(@ApiParam(value = ""  )  @Valid @RequestBody ObservationVariableSearchRequest body,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;


    @ApiOperation(value = "Get the results of a Observation Variable search request", nickname = "searchVariablesSearchResultsDbIdGet", notes = "Search observation variables.  See Search Services for additional implementation details.", response = ObservationVariablesResponse.class, authorizations = {
        @Authorization(value = "AuthorizationToken")
    }, tags={ "Observation Variables","Search Services", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ObservationVariablesResponse.class),
        @ApiResponse(code = 400, message = "Bad Request", response = String.class),
        @ApiResponse(code = 401, message = "Unauthorized", response = String.class),
        @ApiResponse(code = 403, message = "Forbidden", response = String.class),
        @ApiResponse(code = 404, message = "Not Found", response = String.class) })
    @RequestMapping(value = "/search/variables/{searchResultsDbId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<ObservationVariablesResponse> searchVariablesSearchResultsDbIdGet(@ApiParam(value = "Permanent unique identifier which references the search results",required=true) @PathVariable("searchResultsDbId") String searchResultsDbId,@ApiParam(value = "Which result page is requested. The page indexing starts at 0 (the first page is 'page'= 0). Default is `0`.") @Valid @RequestParam(value = "page", required = false) Integer page,@ApiParam(value = "The size of the pages to be returned. Default is `1000`.") @Valid @RequestParam(value = "pageSize", required = false) Integer pageSize,@ApiParam(value = "HTTP HEADER - Token used for Authorization   <strong>Bearer {token_string} </strong>" ) @RequestHeader(value="Authorization", required=false) String authorization) throws BrAPIServerException;

}
